---
# Main playbook
- name: Setup CI/CD Infrastructure
  hosts: jenkins
  become: yes
  vars_files:
    - vars/main.yml
  
  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - openjdk-11-jdk
          - git
          - curl
          - unzip
          - python3
          - python3-pip
          - python3-venv
        state: present
      when: ansible_os_family == "Debian"

    - name: Create Jenkins group
      group:
        name: jenkins
        state: present

    - name: Create Jenkins user
      user:
        name: jenkins
        group: jenkins
        shell: /bin/bash
        home: "{{ jenkins_home }}"
        system: yes

    - name: Set JAVA_HOME
      lineinfile:
        path: /etc/environment
        line: 'JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"'
        state: present

  roles:
    - common
    - jenkins
    - sonarqube

  post_tasks:
    - name: Wait for Jenkins to start up
      uri:
        url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/login"
        status_code: 200
        timeout: 5
      register: result
      until: result.status == 200
      retries: 60
      delay: 5

    - name: Wait for SonarQube to start up
      uri:
        url: "http://localhost:{{ sonarqube_web_port }}"
        status_code: 200
        timeout: 5
      register: result
      until: result.status == 200
      retries: 60
      delay: 5

# Role tasks
- name: Common Setup
  hosts: jenkins_server
  become: yes
  tasks:
    - name: Install common packages
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - git
        - curl
        - wget
        - unzip
        - python3-pip
        - openjdk-11-jdk

    - name: Set timezone
      timezone:
        name: UTC

- name: Setup Jenkins
  hosts: jenkins_server
  become: yes
  tasks:
    - name: Add Jenkins repository key
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
        state: present

    - name: Add Jenkins repository
      apt_repository:
        repo: deb https://pkg.jenkins.io/debian-stable binary/
        state: present

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Create Jenkins plugins directory
      file:
        path: /var/lib/jenkins/plugins
        state: directory
        owner: jenkins
        group: jenkins

    - name: Download Jenkins plugins
      get_url:
        url: "https://updates.jenkins.io/download/plugins/{{ item }}/latest/{{ item }}.hpi"
        dest: "/var/lib/jenkins/plugins/{{ item }}.hpi"
        owner: jenkins
        group: jenkins
      with_items:
        - workflow-aggregator
        - git
        - github
        - sonar
        - pipeline-stage-view
        - junit
        - cobertura
        - warnings-ng

    - name: Start Jenkins service
      service:
        name: jenkins
        state: started
        enabled: yes

- name: Setup SonarQube
  hosts: jenkins_server
  become: yes
  vars:
    sonarqube_version: "9.9.1"
  tasks:
    - name: Download SonarQube
      get_url:
        url: "https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-{{ sonarqube_version }}.zip"
        dest: "/opt/sonarqube-{{ sonarqube_version }}.zip"

    - name: Create SonarQube group
      group:
        name: sonarqube
        state: present

    - name: Create SonarQube user
      user:
        name: sonarqube
        group: sonarqube
        shell: /bin/bash
        system: yes

    - name: Extract SonarQube
      unarchive:
        src: "/opt/sonarqube-{{ sonarqube_version }}.zip"
        dest: /opt
        remote_src: yes
        creates: "/opt/sonarqube-{{ sonarqube_version }}"

    - name: Create SonarQube symlink
      file:
        src: "/opt/sonarqube-{{ sonarqube_version }}"
        dest: /opt/sonarqube
        state: link
        owner: sonarqube
        group: sonarqube

    - name: Configure SonarQube service
      template:
        src: templates/sonarqube.service.j2
        dest: /etc/systemd/system/sonarqube.service
      notify: restart sonarqube

  handlers:
    - name: restart sonarqube
      systemd:
        name: sonarqube
        state: restarted
        daemon_reload: yes
